openapi: 3.0.0
info:
  title: Paypal - Final Assessment
  version: "v1-oas3"
  description: >-
    Paypal Inventory API is built using REST principles which ensures
    predictable URLs that makes writing applications easy. This API follows HTTP
    rules, enabling a wide range of HTTP clients which can be used to interact
    with the API.


    Every resource is exposed as a URL. The URL of each resource can be obtained
    by accessing the API Root Endpoint.

    # Formats

    All the resource are JSON and XML format accessible. The type of format
    required can be passed in request header under Content-Type, by default JSON
    format will be used under application/type. 

    # Cacheability

    Cacheability of the resources is also been taken care in this API.
    Cacheability has been enabled under successfull response header using
    'Cache-Control'. The API provides 2 types of caches - public and private,
    depending upon the resource being used. Caches are also bound to a timeout
    after which the caches would be refreshed, 

    #  Authentication

    All the resources of the API need to be authenticated by a JWT bearer token.
    The bearer token needs to be passed in the request header while making any
    request that might require authentication.

    Bearer token can be acquired by signing up as a new user.

    # HTTP Methods

    The API uses the following http methods

    | Method | Description                                                  |

    |--------|--------------------------------------------------------------|

    | GET    | Used for retrieving resources.                               |

    | POST   | Used for creating resources and performing resource actions. |

    | DELETE | Used for deleting resources.                                 |

    | PATCH  | Used for updating resources.                                 |

    | PUT    | Used for replacing resources.                                |


    # Errors
     Paypal Inventory API uses HTTP status codes to indicate success or failure of an API call. In general, status codes in the 2xx range means success, 4xx range means there was an error in the provided information, and those in the 5xx range indicate server side errors. Commonly used HTTP status codes are listed below.
       | Status Code | Description                                                                                                                   |
       |-------------|-------------------------------------------------------------------------------------------------------------------------------|
       | 200         | Success - The request was successfully completed.                                                                             |
       | 201         | Created - The request was a success and one or more resources have been created.                                              |
       | 400         | Bad request - The request cannot be performed. Usually because of malformed parameter or missing parameter.                   |
       | 401         | Unauthorized (Invalid AuthToken) - Request was rejected because of invalid AuthToken.                                         |
       | 403         | Forbidden - Request was rejected because of insufecient access right.                                                         |
       | 404         | URL Not Found - The URL you’ve sent is wrong. It’s possible that the resource you’ve requested has been moved to another URL. |
       | 422         | Unprocessable Entity - Syntax was correct but system was unable to process the request                                        |
       | 500         | Internal Server Error - The server encountered an unexpected condition that prevented it from fulfilling the request.         |
            
  license:
    name: MIT
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/whateverxforever/SampleApi/v1'
paths:
  /inventory:
    get:
      summary: List of all the sku's in your inventory
      operationId: getInventory
      parameters:
        - name: num_items
          required: false
          in: query
          description: Number of items to be displayed
          schema:
            type: integer
            example: 20
        - name: sort
          in: query
          description: Sort the items ASC/DES
          schema:
            type: string
            example: ASC
            default: ASC
        - name: sort_by
          required: false
          in: query
          description: Specify the sorting criteria like 'id'
          schema:
            type: string
            example: id
            default: ID
        - name: filter
          required: false
          in: query
          description: Item matched by filter value
          schema:
            type: string
            example: BE2231
        - name: filter_by
          in: query
          description: Filter value field
          schema:
            type: string
            example: rating
        - schema:
            type: string
            enum:
              - application/xml
              - application/json
            default: application/json
          in: header
          name: Content-Type
          required: true
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                xml:
                  name: Data
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'public, max-age=3600'
              description: 'public, max-age=3600'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: No item found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                      <message>No item found</message>
                      <status_code>404</status_code>
                    </response>
      tags:
        - Inventory
      description: >-
        This API can be used to check the inventory details. There are no
        required parameters for this API, but further parameters can be defined
        to sort and filter the data.


        In case no filter conditions are passed, the details are displayed in
        the default JSON format. The response is public cache enabled.
      security:
        - bearerAuth: []
    post:
      summary: Add product to the inventory
      operationId: addProduct
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Resource Created:
                  value:
                    message: >-
                      Product/'s have been successfully created and added to the
                      inventory
                    status_code: '201'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Resource Created:
                  value: |
                    <response>
                        <message>Product/'s have been successfully created and added to the inventory</message>
                        <status_code>201</status_code>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in adding new product!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in adding new product!</message>
                        <status_code>422</status_code>
                    </response>
      description: >-
        Use this API to add a new product to your inventory. Provide the
        required product details along with any additional info in order to
        successfully add a new product to your product list.


        Only admin and vendor can access this resource.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
            examples:
              Single:
                value:
                  - sku: Britannia Biscuits
                    category_code: CONF001
                    price: 25
                    stock: 1200
              Multiple:
                value:
                  - sku: Britannia Biscuits
                    category_code: CONF001
                    price: 25
                    stock: 1200
                  - sku: Lux Shampoo
                    category_code: HAIR001
                    price: 135
                    stock: 400
          application/xml:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
            examples:
              Single:
                value: |
                  <Data>
                      <Product>
                          <category_code>CONF001</category_code>
                          <id>1234232</id>
                          <price>25Rs</price>
                          <sku>Britannia Biscuits</sku>
                          <stock>1200</stock>
                      </Product>
                  </Data>
              Multiple:
                value: |
                  <Data>
                    <Product>
                        <sku>Britannia Biscuits</sku>
                        <category_code>CONF001</category_code>
                        <price>25Rs</price>
                        <stock>1200</stock>
                    </Product>
                    <Product>
                        <sku>Lux Shampoo</sku>
                        <category_code>HAIR001</category_code>
                        <price>135</price>
                        <stock>400</stock>
                    </Product>
                  </Data>
        description: >-
          You can add mutiple objects in the inventory simultaneously by putting
          all the products in an array.
      tags:
        - Inventory
      parameters:
        - schema:
            type: string
            default: application/json
            enum:
              - application/json
              - application/xml
          in: header
          name: Content-Type
          required: true
      security:
        - bearerAuth: []
  '/inventory/{productId}':
    get:
      summary: Get a particular product from your inventory
      operationId: getInventoryItem
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: object
                xml:
                  name: Data
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: No item found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value: |
                    <response>
                      <message>No item found</message>
                      <status_code>404</status_code>
                    </response>
      description: >-
        Use this API to get the details of a specific product. The product
        details is available in XML/JSON format.


        You need to pass the product id in the endpoint URL for the successful
        call of the API. No other body parameters are required.
      tags:
        - Products
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      security:
        - bearerAuth: []
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
        description: |
          Specify the id of the sku to be obtained
    put:
      summary: Update the entire product details
      operationId: replaceInventoryProduct
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_item:
                    $ref: '#/components/schemas/Product'
                type: object
              examples:
                Example:
                  value:
                    message: Product successfully replaced
                    status_code: 200
                    updated_item:
                      product_id: 17484160
                      sku: shippuden123
                      description: 'Description about the product '
                      category_code: CAT1234
                      category_name: Sample Category
                      image: 'https://www.images.com/product/1243'
                      weight: 0
                      stock: 23
                      created_at: '2017-07-21T17:32:28Z'
                      updated_at: '2017-07-26T23:02:28Z'
                      dimensions: 0.00 x 0.00 x 0.00
                      price: 2500
            application/xml:
              schema:
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_item:
                    type: string
                type: object
              examples:
                Example:
                  value: |
                    <response>
                      <message>Product successfully replaced</message>
                      <status_code>200</status_code>
                      <updated_item>
                          <category_code>CAT1234</category_code>
                          <category_name>Sample Category</category_name>
                          <created_at>2017-07-21T17:32:28Z</created_at>
                          <description>Description about the product </description>
                          <dimensions>0.00 x 0.00 x 0.00</dimensions>
                          <image>https://www.images.com/product/1243</image>
                          <price>2500</price>
                          <product_id>17484160</product_id>
                          <sku>shippuden123</sku>
                          <stock>23</stock>
                          <updated_at>2017-07-26T23:02:28Z</updated_at>
                          <weight>0</weight>
                      </updated_item>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in replacing new product!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in replacing product!</message>
                        <status_code>422</status_code>
                    </response>
      description: >-
        Using this API, you can replace the existing product details with an
        entirely new product details. All the details should be passed in the
        request body.


        Only admin can access this resource.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
            examples:
              Example:
                value: |
                  <Product>
                      <sku>shippuden123</sku>
                      <description>Give description about the product </description>
                      <category_code>CAT1234</category_code>
                      <category_name>Sample Category</category_name>
                      <image>www.images.com/product/1243</image>
                      <weight>0</weight>
                      <price>2500</price>
                      <stock>23</stock>
                      <created_at>2017-07-21T17:32:28Z</created_at>
                      <updated_at>2017-07-26T23:02:28Z</updated_at>
                      <dimensions>0.00 x 0.00 x 0.00</dimensions>
                  </Product>
        description: Update the details of a particular product
      tags:
        - Products
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      security:
        - bearerAuth: []
    delete:
      summary: Delete a particular product from your inventory
      operationId: removeInventoryProduct
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Success:
                  value:
                    message: Product has been successfully deleted
                    status_code: 200
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Success:
                  value: |
                    <Response>
                      <message>Product has been successfully deleted</message>
                      <status_code>200</status_code>
                    </Response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Product not found
                    status_code: 400
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <Response>
                      <message>Product not found</message>
                      <status_code>400</status_code>
                    </Response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>         
      tags:
        - Products
      description: >-
        Use this API to delete a specific product. You need to pass the product
        id in the endpoint URL for the successful call of the API. No other body
        parameters are required.


        Only admin, vendor can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
    patch:
      summary: Update a particular detail about the Product
      operationId: editProduct
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_item:
                    $ref: '#/components/schemas/Product'
              examples:
                Example:
                  value:
                    message: Product successfully updated
                    status_code: 200
                    updated_item:
                      product_id: 17484160
                      sku: shippuden123
                      description: 'Description about the product '
                      category_code: CAT1234
                      category_name: Sample Category
                      image: 'https://www.images.com/product/1243'
                      weight: 0
                      stock: 23
                      created_at: '2017-07-21T17:32:28Z'
                      updated_at: '2017-07-26T23:02:28Z'
                      dimensions: 0.00 x 0.00 x 0.00
                      price: 2500
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_item:
                    type: string
              examples:
                Example:
                  value: |
                    <response>
                      <message>Product successfully updated</message>
                      <status_code>200</status_code>
                      <updated_item>
                          <category_code>CAT1234</category_code>
                          <category_name>Sample Category</category_name>
                          <created_at>2017-07-21T17:32:28Z</created_at>
                          <description>Description about the product </description>
                          <dimensions>0.00 x 0.00 x 0.00</dimensions>
                          <image>https://www.images.com/product/1243</image>
                          <price>2500</price>
                          <product_id>17484160</product_id>
                          <sku>shippuden123</sku>
                          <stock>23</stock>
                          <updated_at>2017-07-26T23:02:28Z</updated_at>
                          <weight>0</weight>
                      </updated_item>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in editing product details!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in editing product details!</message>
                        <status_code>422</status_code>
                    </response>
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value:
                    message: Invalid argument supplied
                    status_code: 500
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value: |
                    <Response>
                      <message>Invalid argument supplied</message>
                      <status_code>500</status_code>
                    </Response>
      description: >-
        Using this API, you can edit the existing product details. All the
        details should be passed in the request body.


        Only admin, vendor can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
            examples:
              Example:
                value:
                  stock: 23
                  category_code: CAT1234
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        description: ''
      tags:
        - Products
  /orders:
    post:
      summary: Create an order
      operationId: addOrder
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Resource Created:
                  value:
                    message: >-
                      Order/'s have been successfully created and added to the
                      inventory
                    status_code: '201'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Resource Created:
                  value: |
                    <response>
                        <message>Order/'s have been successfully created and added to the inventory</message>
                        <status_code>201</status_code>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in adding new order!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in adding new order!</message>
                        <status_code>422</status_code>
                    </response>
      description: >-
        Use this API to add a order. Provide the required product details along
        with any additional info in order to successfully add a new product to
        your product list.


        Only admin and vendor can access this resource.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: ''
      security:
        - bearerAuth: []
      tags:
        - Sales Orders
    get:
      summary: List of all orders
      operationId: getOrderList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                type: object
                xml:
                  name: Data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'private, max-life= 3400'
              description: 'private, max-age=3600'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: Order list not Found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                      <message>Order list not found</message>
                      <status_code>404</status_code>
                    </response>       
      description: >-
        This API call will display a list of all created and available orders in
        your account. You can also sort and filter the data according to your
        needs by passing the optional parameters. 


        Not passing anything will display the data in the default format. The
        response is private cache enabled.
      security:
        - bearerAuth: []
      parameters:
        - name: num_items
          required: false
          in: query
          description: Number of items to be displayed
          schema:
            type: integer
            example: 2
        - name: sort
          in: query
          description: Sort the users ASC/DES
          schema:
            type: string
            example: ASC
        - name: sort_by
          required: false
          in: query
          description: Specify the sorting criteria like 'product_id'
          schema:
            type: string
            example: id
        - name: filter
          required: false
          in: query
          description: Item matched by filter value
          schema:
            type: string
            example: Bruce Wayne
        - name: filter_by
          in: query
          description: Filter value field
          schema:
            type: string
            example: name
        - schema:
            type: string
            enum:
              - application/xml
              - application/json
            default: application/json
          in: header
          name: Content-Type
          required: true
      tags:
        - Sales Orders
  '/orders/{orderId}':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    get:
      summary: Get a particular order from your Orders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                type: object
                xml:
                  name: Data
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: No order found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value: |
                    <response>
                      <message>No order found</message>
                      <status_code>404</status_code>
                    </response>
      operationId: getOrder
      description: >-
        Use this API to get the details of a specific product. The product
        details is available in XML/JSON format.


        You need to pass the order id in the endpoint URL for the successful
        call of the API. No other body parameters are required.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      tags:
        - Sales Orders
    delete:
      summary: Remove a order from your order list
      operationId: deleteOrder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Success:
                  value:
                    message: Order has been successfully deleted
                    status_code: 200
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Success:
                  value: |
                    <Response>
                      <message>Order has been successfully deleted</message>
                      <status_code>200</status_code>
                    </Response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: No order found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                      <message>No order found</message>
                      <status_code>404</status_code>
                    </response>
      description: >-
        Use this API to delete a specific order. You need to pass the product id
        in the endpoint URL for the successful call of the API. No other body
        parameters are required.


        Only admin, vendor can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            default: application/json
            enum:
              - application/json
              - application/xml
          in: header
          name: Content-Type
          description: ''
          required: true
      tags:
        - Sales Orders
    put:
      summary: Update the entire order details
      operationId: replaceOrder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_order:
                    $ref: '#/components/schemas/Order'
              examples:
                Example:
                  value:
                    message: order has been successfully updated
                    status_code: 200
                    updated_order:
                      customer_id: '123546'
                      shipping_adress:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
                      billing_address:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
                      items:
                        - product_id: '12332'
                          sku: Dell Mouse G2
                          description: Gaming Mouse by Dell; 1200 dpi
                          category_code: ELE1201
                          units: 45
                          price: 900
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_order:
                    $ref: '#/components/schemas/Order'
              examples:
                Example:
                  value: |
                    <Response>
                      <billing_address>
                          <address>1919, KSN Nagar</address>
                          <city>Ludhiana</city>
                          <company_name>Wayne Industries</company_name>
                          <country>India</country>
                          <pincode>141002</pincode>
                          <state>Punjab</state>
                      </billing_address>
                      <customer_id>123546</customer_id>
                      <items>
                          <element>
                            <category_code>ELE1201</category_code>
                            <description>Gaming Mouse by Dell; 1200 dpi</description>
                            <price>900</price>
                            <product_id>12332</product_id>
                            <sku>Dell Mouse G2</sku>
                            <units>45</units>
                          </element>
                      </items>
                      <shipping_adress>
                          <address>1919, KSN Nagar</address>
                          <city>Ludhiana</city>
                          <company_name>Wayne Industries</company_name>
                          <country>India</country>
                          <pincode>141002</pincode>
                          <state>Punjab</state>
                      </shipping_adress>
                    </Response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in replacing new order!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in replacing order!</message>
                        <status_code>422</status_code>
                    </response>
      description: >-
        Using this API, you can replace the existing order details with an
        entirely new order details. All the details should be passed in the
        request body.


        Only admin can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/xml
              - application/json
            default: application/json
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
        description: Update all the details of a prticular order
      tags:
        - Sales Orders
    patch:
      summary: Update a particular detail about the Order
      operationId: updateOrder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_order:
                    $ref: '#/components/schemas/Order'
              examples:
                Example:
                  value:
                    message: order has been successfully updated
                    status_code: 200
                    updated_order:
                      customer_id: '123546'
                      shipping_adress:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
                      billing_address:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
                      items:
                        - product_id: '12332'
                          sku: Dell Mouse G2
                          description: Gaming Mouse by Dell; 1200 dpi
                          category_code: ELE1201
                          units: 45
                          price: 900
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_order:
                    $ref: '#/components/schemas/Order'
              examples:
                Example:
                  value: |
                    <Response>
                      <billing_address>
                          <address>1919, KSN Nagar</address>
                          <city>Ludhiana</city>
                          <company_name>Wayne Industries</company_name>
                          <country>India</country>
                          <pincode>141002</pincode>
                          <state>Punjab</state>
                      </billing_address>
                      <customer_id>123546</customer_id>
                      <items>
                          <element>
                            <category_code>ELE1201</category_code>
                            <description>Gaming Mouse by Dell; 1200 dpi</description>
                            <price>900</price>
                            <product_id>12332</product_id>
                            <sku>Dell Mouse G2</sku>
                            <units>45</units>
                          </element>
                      </items>
                      <shipping_adress>
                          <address>1919, KSN Nagar</address>
                          <city>Ludhiana</city>
                          <company_name>Wayne Industries</company_name>
                          <country>India</country>
                          <pincode>141002</pincode>
                          <state>Punjab</state>
                      </shipping_adress>
                    </Response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in editing order details!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in editing order details!</message>
                        <status_code>422</status_code>
                    </response>
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value:
                    message: Invalid argument supplied
                    status_code: 500
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value: |
                    <Response>
                      <message>Invalid argument supplied</message>
                      <status_code>500</status_code>
                    </Response>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            examples:
              Example:
                value:
                  customer_id: '123546'
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      security:
        - bearerAuth: []
      description: >-
        Using this API, you can edit the existing order details. All the details
        should be passed in the request body.


        Only admin, vendor can access this resource.
      tags:
        - Sales Orders
  '/shipments/{shipmentId}':
    parameters:
      - schema:
          type: string
        name: shipmentId
        in: path
        required: true
    get:
      summary: Get a particular shipment from your shipments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Shipment'
            application/xml:
              schema:
                type: object
                xml:
                  name: Data
                properties:
                  data:
                    $ref: '#/components/schemas/Shipment'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: No shipment Found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value: |
                    <response>
                      <message>No shipment found</message>
                      <status_code>404</status_code>
                    </response>
      operationId: getShipment
      description: >-
        Use this API to get a specific shipment. The shipment details is
        available in XML/JSON format.


        You need to pass the shipment id in the endpoint URL for the successful
        call of the API. No other body parameters are required.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      tags:
        - Shipments
    delete:
      summary: Remove a shipment from your shipment list
      operationId: deleteShipment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Success:
                  value:
                    message: shipment has been successfully deleted
                    status_code: 200
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Success:
                  value: |
                    <Response>
                      <message>shipment has been successfully deleted</message>
                      <status_code>200</status_code>
                    </Response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: No shipment found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                      <message>No shipment found</message>
                      <status_code>404</status_code>
                    </response>
      description: >-
        Use this API to delete a specific shipment. You need to pass the
        shipment id in the endpoint URL for the successful call of the API. No
        other body parameters are required.


        Only admin, vendor can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            default: application/json
            enum:
              - application/json
              - application/xml
          in: header
          name: Content-Type
          description: ''
          required: true
      tags:
        - Shipments
    put:
      summary: Update the entire shipment details
      operationId: replaceShipment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_shipment:
                    $ref: '#/components/schemas/Shipment'
              examples:
                Example:
                  value:
                    message: shipment has been successfully updated
                    status_code: 200
                    updated_shipment:
                      shipment_id: '898735957983'
                      shipment_number: SH-2873
                      date: '2020-03-20T16:11:06.706Z'
                      status: shipped
                      detailed_status: shipped from warehouse in Thane
                      carrier: Fed-Ex
                      customer_id: '12496214'
                      customer_name: Molly
                      items:
                        - product_id: '123779790'
                          sku: PlayStation 4
                          quantity: 1
                          price: 400000
                          order_id: '234235'
                      shipping_charges: 59
                      total: 2559
                      billing_adress:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
                      shipping_adress:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_shipment:
                    $ref: '#/components/schemas/Shipment'
              examples:
                Example:
                  value: |
                    <response>
                     <message>shipment has been successfully updated</message>
                     <status_code>200</status_code>
                     <updated_shipment>
                         <billing_adress>
                           <address>1919, KSN Nagar</address>
                           <city>Ludhiana</city>
                           <company_name>Wayne Industries</company_name>
                           <country>India</country>
                           <pincode>141002</pincode>
                           <state>Punjab</state>
                         </billing_adress>
                         <carrier>Fed-Ex</carrier>
                         <customer_id>12496214</customer_id>
                         <customer_name>Molly</customer_name>
                         <date>2020-03-20T16:11:06.706Z</date>
                         <detailed_status>shipped from warehouse in Thane</detailed_status>
                         <items>
                           <element>
                               <order_id>234235</order_id>
                               <price>400000</price>
                               <product_id>123779790</product_id>
                               <quantity>1</quantity>
                               <sku>PlayStation 4</sku>
                           </element>
                         </items>
                         <shipment_id>898735957983</shipment_id>
                         <shipment_number>SH-2873</shipment_number>
                         <shipping_adress>
                           <address>1919, KSN Nagar</address>
                           <city>Ludhiana</city>
                           <company_name>Wayne Industries</company_name>
                           <country>India</country>
                           <pincode>141002</pincode>
                           <state>Punjab</state>
                         </shipping_adress>
                         <shipping_charges>59</shipping_charges>
                         <status>shipped</status>
                         <total>2559</total>
                     </updated_shipment>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in replacing new shipment!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in replacing shipment!</message>
                        <status_code>422</status_code>
                    </response>
      description: >-
        Using this API, you can replace the existing shipment details with an
        entirely new shipment details. All the details should be passed in the
        request body.


        Only admin can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/xml
              - application/json
            default: application/json
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
          application/xml:
            schema:
              $ref: '#/components/schemas/Shipment'
        description: Update all the details of a prticular shipment
      tags:
        - Shipment Updation
  /shipments:
    post:
      summary: Create a shipment
      operationId: addShipment
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Resource Created:
                  value:
                    message: >-
                      Shipment have been successfully created and added to the
                      inventory
                    status_code: '201'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Resource Created:
                  value: |
                    <response>
                        <message>Shipment have been successfully created and added to the inventory</message>
                        <status_code>201</status_code>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in adding new shipment!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in adding new shipment!</message>
                        <status_code>422</status_code>
                    </response>
      description: >-
        Use this API to create a new shipment. Provide the required shipment
        details along with any additional info.


        Only admin and vendor can access this resource.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
        description: ''
      security:
        - bearerAuth: []
      tags:
        - Shipments
    get:
      summary: List of all shipments
      operationId: getShipments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shipment'
            application/xml:
              schema:
                type: object
                xml:
                  name: Data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shipment'
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'private, max-age=3600'
              description: 'value: private, max-age=3600'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: User Not Found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                      <message>User not found</message>
                      <status_code>404</status_code>
                    </response>       
      description: >-
        Use this API to get the shipment details of all the shipments.The data
        is displayed in the default format if no filter or sort condition is
        passed. 


        You can use the filter and sort conditions to streamline your data. The
        response is private cacheable. This resource can only be accessed by the
        vendor, admin.
      security:
        - bearerAuth: []
      parameters:
        - name: num_item
          required: false
          in: query
          description: Number of items to be displayed
          schema:
            type: integer
            example: 2
        - name: sort
          in: query
          description: Sort the users ASC/DES
          schema:
            type: string
            example: ASC
        - name: sort_by
          required: false
          in: query
          description: Specify the sorting criteria like 'order_id'
          schema:
            type: string
            example: order_id
        - name: filter
          required: false
          in: query
          description: Item matched by filter value
          schema:
            type: string
            example: '123324'
        - name: filter_by
          in: query
          description: Filter value field
          schema:
            type: string
            example: '2141224'
        - schema:
            type: string
            enum:
              - application/xml
              - application/json
            default: application/json
          in: header
          name: Content-Type
          required: true
      tags:
        - Shipments
  /category:
    post:
      summary: Create an category
      operationId: addCategories
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Resource Created:
                  value:
                    message: >-
                      Category/'s have been successfully created and added to
                      the category list
                    status_code: '201'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Resource Created:
                  value: |
                    <response>
                        <message>Category/'s have been successfully created and added to the category list</message>
                        <status_code>201</status_code>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in adding new category!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in adding new category!</message>
                        <status_code>422</status_code>
                    </response>
      description: >-
        Use this API to add a new category. Provide the required category
        details along with any additional info in order to successfully add a
        new category to your category list.


        Only admin can access this resource.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        description: ''
      security:
        - bearerAuth: []
      tags:
        - Category
    get:
      summary: List of all categories
      operationId: getCategories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                type: object
                xml:
                  name: Data
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'public, max-age=3600'
              description: 'value: public, max-age=3600'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: No  found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                      <message>No category found</message>
                      <status_code>404</status_code>
                    </response>
      description: >-
        This API can be used to check the category details. There are no
        required parameters for this API, but further parameters can be defined
        to sort and filter the data.


        In case no filter conditions are passed, the categories are displayed in
        the default JSON format. The response is public cache enabled.
      security:
        - bearerAuth: []
      parameters:
        - name: sort
          in: query
          description: Sort ASC/DES
          schema:
            type: string
            example: ASC
        - name: sort_by
          required: false
          in: query
          description: Specify the sorting criteria like 'category_id'
          schema:
            type: string
            example: category_id
        - name: filter
          required: false
          in: query
          description: Item matched by filter value
          schema:
            type: string
            example: '124214'
        - name: filter_by
          in: query
          description: Filter value field
          schema:
            type: string
            example: category_name
        - schema:
            type: string
            enum:
              - application/xml
              - application/json
            default: application/json
          in: header
          name: Content-Type
          required: true
      tags:
        - Category
    parameters: []
  /users:
    get:
      summary: List of all Users
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                type: object
            application/xml:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                    xml:
                      name: Data
                type: object
          headers:
            Cache-Control:
              schema:
                type: string
                default: 'private, max-life=5400'
              description: 'public, max-age=3600'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: User Not Found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                      <message>User not found</message>
                      <status_code>404</status_code>
                    </response>       
      operationId: getUsers
      description: >-
        This API can be used to check the user details. There are no required
        parameters for this API, but further parameters can be defined to sort
        and filter the data.


        In case no filter conditions are passed, the details are displayed in
        the default JSON format. The response is private cache enabled.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
        - schema:
            type: string
          in: query
          name: filter_by
          description: criteria used to filter
        - schema:
            type: string
          in: query
          name: sort_by
          description: column to be sorted by
        - schema:
            type: string
            enum:
              - ASC
              - DEC
            default: DEC
          in: query
          name: sort
          description: sort by ASC/DEC
        - schema:
            type: string
          in: query
          name: filter
          description: filter value
    post:
      summary: Add a new user
      operationId: post-users
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Resource Created:
                  value:
                    message: User have been successfully created
                    status_code: '201'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Resource Created:
                  value: |
                    <response>
                        <message>User have been successfully created</message>
                        <status_code>201</status_code>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in adding new User!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in adding new User!</message>
                        <status_code>422</status_code>
                    </response>
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              type: object
              properties: {}
        description: Create a new user by adding all the details
      description: >+
        Use this API to add a new user. Provide the required user details along
        with any additional info in order to successfully add a new user to the
        organization.


      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get a particular user from Users
      tags:
        - Users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
            application/xml:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>            
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: No user Found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value: |
                    <response>
                      <message>No User found</message>
                      <status_code>404</status_code>
                    </response>
      operationId: get-users-userId
      description: >-
        Pass the API user ID as a path parameter to get back user details as the
        response.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
    delete:
      summary: Delete a user
      operationId: delete-users-userId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Success:
                  value:
                    message: User has been successfully deleted
                    status_code: 200
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Success:
                  value: |
                    <Response>
                      <message>User has been successfully deleted</message>
                      <status_code>200</status_code>
                    </Response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: No user found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                      <message>No user found</message>
                      <status_code>404</status_code>
                    </response>
      tags:
        - Users
      description: >-
        Use this API to delete a specific user. You need to pass the user id in
        the endpoint URL for the successful call of the API. No other body
        parameters are required.


        Only admin can access this resource.
      parameters: []
      security:
        - bearerAuth: []
    patch:
      summary: Update details about the User
      operationId: updateUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_order:
                    $ref: '#/components/schemas/User'
              examples:
                Example:
                  value:
                    message: user has been successfully updated
                    status_code: 200
                    updated_user:
                      user_id: '235362'
                      name: Bruce Wayne
                      email_ids:
                        - email@work.com
                        - email@home.com
                      user_role: admin
                      photo: 'https://images.com/userImage'
                      created_time: '2020-03-20T16:55:25.561Z'
                      address:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_order:
                    $ref: '#/components/schemas/User'
              examples:
                Example:
                  value: |
                    <response>
                      <message>user has been successfully updated</message>
                      <status_code>200</status_code>
                      <updated_user>
                          <address>
                            <address>1919, KSN Nagar</address>
                            <city>Ludhiana</city>
                            <company_name>Wayne Industries</company_name>
                            <country>India</country>
                            <pincode>141002</pincode>
                            <state>Punjab</state>
                          </address>
                          <created_time>2020-03-20T16:55:25.561Z</created_time>
                          <email_ids>
                            <element>email@work.com</element>
                            <element>email@home.com</element>
                          </email_ids>
                          <name>Bruce Wayne</name>
                          <photo>https://images.com/userImage</photo>
                          <user_id>235362</user_id>
                          <user_role>admin</user_role>
                      </updated_user>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in editing user details!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in editing user details!</message>
                        <status_code>422</status_code>
                    </response>
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value:
                    message: Invalid argument supplied
                    status_code: 500
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value: |
                    <Response>
                      <message>Invalid argument supplied</message>
                      <status_code>500</status_code>
                    </Response>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example:
                value:
                  address:
                    city: Ludhiana
                    state: Punjab
                    address: '1919, KSN Nagar'
                    country: India
                    pincode: '141002'
                    company_name: Wayne Industries
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      security:
        - bearerAuth: []
      description: >-
        Using this API, you can edit the existing user details like their roles.
        All the details should be passed in the request body.


        Only admin can access this resource.
      tags:
        - User Updation
  '/category/{categoryId}':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    get:
      summary: Get a particular category from your categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                type: object
                xml:
                  name: Data
                properties:
                  data:
                    $ref: '#/components/schemas/Category'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>            
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Not Found:
                  value:
                    message: No category Found
                    status_code: '404'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                      <message>No category found</message>
                      <status_code>404</status_code>
                    </response>
      operationId: getCategory
      description: >-
        Use this API to get the details of a specific category. The category
        details is available in XML/JSON format.


        You need to pass the category id in the endpoint URL for the successful
        call of the API. No other body parameters are required.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      tags:
        - Category
    delete:
      summary: Remove a category from your category list
      operationId: deleteCategory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Success:
                  value:
                    message: category has been successfully deleted
                    status_code: 200
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Success:
                  value: |
                    <Response>
                      <message>category has been successfully deleted</message>
                      <status_code>200</status_code>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Category not found
                    status_code: 400
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <Response>
                      <message>Category not found</message>
                      <status_code>400</status_code>
                    </Response>
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>         
      description: >-
        Use this API to delete a specific category. You need to pass the product
        id in the endpoint URL for the successful call of the API. No other body
        parameters are required.


        Only admin can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            default: application/json
            enum:
              - application/json
              - application/xml
          in: header
          name: Content-Type
          description: ''
          required: true
      tags:
        - Category
  '/category/{categoryId}/attributes':
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    patch:
      summary: Update category attributes
      operationId: editCategory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_category:
                    $ref: '#/components/schemas/Category'
              examples:
                Example:
                  value:
                    data:
                      - category_id: '23423432'
                        category_name: Mobile
                        parent_category: Electronics
                        attributes:
                          RAM: string
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_category:
                    $ref: '#/components/schemas/Category'
              examples:
                Example:
                  value: |
                    <response>
                      <data>
                          <element>
                            <attributes>
                                <RAM>string</RAM>
                            </attributes>
                            <category_id>23423432</category_id>
                            <category_name>Mobile</category_name>
                            <parent_category>Electronics</parent_category>
                          </element>
                      </data>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in editing category attributes!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in editing category attributes!</message>
                        <status_code>422</status_code>
                    </response>
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value:
                    message: Invalid argument supplied
                    status_code: 500
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value: |
                    <Response>
                      <message>Invalid argument supplied</message>
                      <status_code>500</status_code>
                    </Response>          
      description: >-
        Using this API, you can edit the existing category attributes. All the
        details should be passed in the request body.


        Only admin, vendor can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      tags:
        - Category Modification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attributes:
                  type: object
                  properties:
                    RAM:
                      type: string
  '/shipment/{shipmentId}/status':
    parameters:
      - schema:
          type: string
        name: shipmentId
        in: path
        required: true
    patch:
      summary: Change status of your shipment
      operationId: updateShipmentStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_shipment:
                    $ref: '#/components/schemas/Shipment'
              examples:
                Example:
                  value:
                    message: shipment has been successfully updated
                    status_code: 200
                    updated_shipment:
                      shipment_id: '898735957983'
                      shipment_number: SH-2873
                      date: '2020-03-20T16:11:06.706Z'
                      status: shipped
                      detailed_status: shipped from warehouse in Thane
                      carrier: Fed-Ex
                      customer_id: '12496214'
                      customer_name: Molly
                      items:
                        - product_id: '123779790'
                          sku: PlayStation 4
                          quantity: 1
                          price: 400000
                          order_id: '234235'
                      shipping_charges: 59
                      total: 2559
                      billing_adress:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
                      shipping_adress:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_shipment:
                    $ref: '#/components/schemas/Shipment'
              examples:
                Example:
                  value: |
                    <response>
                      <message>shipment has been successfully updated</message>
                      <status_code>200</status_code>
                      <updated_shipment>
                          <billing_adress>
                            <address>1919, KSN Nagar</address>
                            <city>Ludhiana</city>
                            <company_name>Wayne Industries</company_name>
                            <country>India</country>
                            <pincode>141002</pincode>
                            <state>Punjab</state>
                          </billing_adress>
                          <carrier>Fed-Ex</carrier>
                          <customer_id>12496214</customer_id>
                          <customer_name>Molly</customer_name>
                          <date>2020-03-20T16:11:06.706Z</date>
                          <detailed_status>shipped from warehouse in Thane</detailed_status>
                          <items>
                            <element>
                                <order_id>234235</order_id>
                                <price>400000</price>
                                <product_id>123779790</product_id>
                                <quantity>1</quantity>
                                <sku>PlayStation 4</sku>
                            </element>
                          </items>
                          <shipment_id>898735957983</shipment_id>
                          <shipment_number>SH-2873</shipment_number>
                          <shipping_adress>
                            <address>1919, KSN Nagar</address>
                            <city>Ludhiana</city>
                            <company_name>Wayne Industries</company_name>
                            <country>India</country>
                            <pincode>141002</pincode>
                            <state>Punjab</state>
                          </shipping_adress>
                          <shipping_charges>59</shipping_charges>
                          <status>shipped</status>
                          <total>2559</total>
                      </updated_shipment>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in editing status details!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in editing status details!</message>
                        <status_code>422</status_code>
                    </response>
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value:
                    message: Invalid argument supplied
                    status_code: 500
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value: |
                    <Response>
                      <message>Invalid argument supplied</message>
                      <status_code>500</status_code>
                    </Response>         
      description: >-
        Using this API, you can edit the status of the shipment. All the details
        should be passed in the request body.


        Only admin, vendor can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/xml
              - application/json
            default: application/json
          in: header
          name: Content-Type
      tags:
        - Shipment Updation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                detailed_status:
                  type: string
            examples:
              Example:
                value:
                  status: shipped
                  detailed_status: shipped from warehouse in Thane
          application/xml:
            schema:
              type: object
              properties:
                status:
                  type: string
                detailed_status:
                  type: string
            examples:
              Example:
                value: |
                  <update>
                    <detailed_status>shipped from warehouse in Thane</detailed_status>
                    <status>shipped</status>
                  </update>
        description: ''
  '/shipment/{shipmentId}/address':
    parameters:
      - schema:
          type: string
        name: shipmentId
        in: path
        required: true
    patch:
      summary: Change delivery address of your shipment
      operationId: updateShipmentAdress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_shipment:
                    $ref: '#/components/schemas/Shipment'
              examples:
                Example:
                  value:
                    message: shipment has been successfully updated
                    status_code: 200
                    updated_shipment:
                      shipment_id: '898735957983'
                      shipment_number: SH-2873
                      date: '2020-03-20T16:11:06.706Z'
                      status: shipped
                      detailed_status: shipped from warehouse in Thane
                      carrier: Fed-Ex
                      customer_id: '12496214'
                      customer_name: Molly
                      items:
                        - product_id: '123779790'
                          sku: PlayStation 4
                          quantity: 1
                          price: 400000
                          order_id: '234235'
                      shipping_charges: 59
                      total: 2559
                      billing_adress:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
                      shipping_adress:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_shipment:
                    $ref: '#/components/schemas/Shipment'
              examples:
                Example:
                  value: |
                    <response>
                      <message>shipment has been successfully updated</message>
                      <status_code>200</status_code>
                      <updated_shipment>
                          <billing_adress>
                            <address>1919, KSN Nagar</address>
                            <city>Ludhiana</city>
                            <company_name>Wayne Industries</company_name>
                            <country>India</country>
                            <pincode>141002</pincode>
                            <state>Punjab</state>
                          </billing_adress>
                          <carrier>Fed-Ex</carrier>
                          <customer_id>12496214</customer_id>
                          <customer_name>Molly</customer_name>
                          <date>2020-03-20T16:11:06.706Z</date>
                          <detailed_status>shipped from warehouse in Thane</detailed_status>
                          <items>
                            <element>
                                <order_id>234235</order_id>
                                <price>400000</price>
                                <product_id>123779790</product_id>
                                <quantity>1</quantity>
                                <sku>PlayStation 4</sku>
                            </element>
                          </items>
                          <shipment_id>898735957983</shipment_id>
                          <shipment_number>SH-2873</shipment_number>
                          <shipping_adress>
                            <address>1919, KSN Nagar</address>
                            <city>Ludhiana</city>
                            <company_name>Wayne Industries</company_name>
                            <country>India</country>
                            <pincode>141002</pincode>
                            <state>Punjab</state>
                          </shipping_adress>
                          <shipping_charges>59</shipping_charges>
                          <status>shipped</status>
                          <total>2559</total>
                      </updated_shipment>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in editing status details!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in editing status details!</message>
                        <status_code>422</status_code>
                    </response>
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value:
                    message: Invalid argument supplied
                    status_code: 500
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value: |
                    <Response>
                      <message>Invalid argument supplied</message>
                      <status_code>500</status_code>
                    </Response>         
      description: >-
        Using this API, you can edit the shipping address of the shipment. All
        the details should be passed in the request body.


        Only admin, vendor can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
          application/xml:
            schema:
              $ref: '#/components/schemas/Address'
      tags:
        - Shipment Updation
  /auth/login:
    post:
      summary: Authentication API
      operationId: post-auth-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '1234563'
                  name:
                    type: string
                    example: Jane Doe
                  email:
                    type: string
                    format: email
                    example: janedoe@mail.com
                  created_at:
                    type: string
                    format: date-time
                  token:
                    type: string
                    example: 23o003248349374
            application/xml:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '1234563'
                  name:
                    type: string
                    example: Jane Doe
                  email:
                    type: string
                    example: janedoe@mail.com
                  created_at:
                    type: string
                    format: date-time
                  token:
                    type: string
                    example: 23o003248349374
                xml:
                  name: response
        '400':
          description: Bad Request - Invalid Data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Credentials do not match our data
                  status_code:
                    type: integer
                    format: int64
                    example: 400
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Credentials do not match
                  status_code:
                    type: integer
                    example: 400
                xml:
                  name: response
        '422':
          description: Unprocessable Entity - Missing Fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Please enter all fields
                  status_code:
                    type: integer
                    format: int64
                    example: 422
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Please enter all fields
                  status_code:
                    type: integer
                    example: 422
                xml:
                  name: response
      description: >-
        Pass your API user 'email' and 'password' as the parameters to get the
        authentication token.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: |
                    Email
                password:
                  type: string
                  description: Password
              required:
                - email
                - password
            examples:
              Sample User:
                value:
                  email: janedoe@mail.com
                  password: password
        description: >-
          Pass your API user 'email' and 'password' as the parameters in the
          request body to get back user details and the authentication token as
          response. This token is to be used as the authentication parameter for
          the further access of the other API's.
      tags:
        - Authentication API
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
  '/user/{userId}/role':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    patch:
      summary: Update role of the User
      operationId: updateUserRole
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_order:
                    $ref: '#/components/schemas/User'
              examples:
                Example:
                  value:
                    message: user has been successfully updated
                    status_code: 200
                    updated_user:
                      user_id: '235362'
                      name: Bruce Wayne
                      email_ids:
                        - email@work.com
                        - email@home.com
                      user_role: admin
                      photo: 'https://images.com/userImage'
                      created_time: '2020-03-20T16:55:25.561Z'
                      address:
                        city: Ludhiana
                        state: Punjab
                        address: '1919, KSN Nagar'
                        country: India
                        pincode: '141002'
                        company_name: Wayne Industries
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status_code:
                    type: integer
                  updated_order:
                    $ref: '#/components/schemas/User'
              examples:
                Example:
                  value: |
                    <response>
                      <message>user has been successfully updated</message>
                      <status_code>200</status_code>
                      <updated_user>
                          <address>
                            <address>1919, KSN Nagar</address>
                            <city>Ludhiana</city>
                            <company_name>Wayne Industries</company_name>
                            <country>India</country>
                            <pincode>141002</pincode>
                            <state>Punjab</state>
                          </address>
                          <created_time>2020-03-20T16:55:25.561Z</created_time>
                          <email_ids>
                            <element>email@work.com</element>
                            <element>email@home.com</element>
                          </email_ids>
                          <name>Bruce Wayne</name>
                          <photo>https://images.com/userImage</photo>
                          <user_id>235362</user_id>
                          <user_role>admin</user_role>
                      </updated_user>
                    </response>
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value:
                    message: Bad Request
                    status_code: '400'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Bad Request:
                  value: |
                    <response>
                        <message>Bad Request</message>
                        <status_code>400</status_code>
                    </response>            
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value:
                    message: No bearer token found
                    status_code: '401'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unauthorized:
                  value: |
                    <response>
                        <message>No bearer token found</message>
                        <status_code>401</status_code>
                    </response>
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value:
                    message: You don't have clearance for this access
                    status_code: '403'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Forbidden:
                  value: |
                    <response>
                        <message>You don't have clearance for this access</message>
                        <status_code>403</status_code>
                    </response>
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value:
                    message: There were errors in editing user details!
                    status_code: 422
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Unprocessable Entity:
                  value: |
                    <response>
                        <message>There were errors in editing user details!</message>
                        <status_code>422</status_code>
                    </response>
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value:
                    message: Invalid argument supplied
                    status_code: 500
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                Internal Server Error:
                  value: |
                    <Response>
                      <message>Invalid argument supplied</message>
                      <status_code>500</status_code>
                    </Response>
      tags:
        - User Updation
      description: >-
        Using this API, you can change the authorization of a user. All the
        details should be passed in the request body.


        Only admin can access this resource.
      security:
        - bearerAuth: []
      parameters:
        - schema:
            type: string
            enum:
              - application/json
              - application/xml
            default: application/json
          in: header
          name: Content-Type
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example:
                value:
                  role: admin
components:
  schemas:
    Product:
      title: Product
      type: object
      description: >-
        A product is the item that is offered for sale. Nature of the product
        could be physical or digital. Based on the type of your business, you
        can offer one or more goods/services. Each of the product may fall under
        a separate pricing category or have add ons associated to them.
      xml:
        name: Product
        wrapped: true
      properties:
        product_id:
          type: integer
          format: int32
          example: 17484160
          description: Unique ID of the product generated by the server
          readOnly: true
        sku:
          type: string
          example: shippuden123
          description: Name of the item to be added
        description:
          type: string
          description: Description of the product
          example: 'Description about the product '
        category_code:
          type: string
          description: Category code of the product
          example: CAT1234
        category_attributes:
          type: object
          description: Category attributes of the product
          example:
            - RAM: 8GB
        image:
          type: string
          description: URL of the image to be added
          format: uri
          example: 'https://www.images.com/product/1243'
        weight:
          type: number
          format: float
          example: 0
          description: Weight of the item in Kg
        stock:
          type: integer
          example: 23
          description: Current stock of the product
        created_at:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
          description: Date-Time of the item creation generated by the server
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: '2017-07-26T23:02:28Z'
          description: Last Date-Time the product was added generated by the server
          readOnly: true
        dimensions:
          type: string
          example: 0.00 x 0.00 x 0.00
          description: Dimensions in the form of length x breadth x height (in cm)
        price:
          type: integer
          example: 2500
          description: Price in rupees
      required:
        - sku
        - category_code
        - stock
        - price
    Address:
      title: Address
      type: object
      description: ''
      properties:
        city:
          type: string
          example: Ludhiana
        state:
          type: string
          example: Punjab
        address:
          type: string
          example: '1919, KSN Nagar'
        country:
          type: string
          example: India
        pincode:
          type: string
          example: '141002'
          minLength: 6
          maxLength: 6
        company_name:
          type: string
          example: Wayne Industries
    Order:
      title: Order
      type: object
      xml:
        name: Order
      description: >-
        A order is a financial document that confirms an impending sale. It
        details the exact quantity, price and delivery details of the products
        or services being sold. 
      properties:
        order_id:
          type: string
          readOnly: true
          description: Order Id
        customer_id:
          type: string
          example: '123546'
          description: ID of the order's owning customer
        date:
          type: string
          format: date-time
          readOnly: true
          description: Date of order creation
        shipping_adress:
          $ref: '#/components/schemas/Address'
        billing_address:
          $ref: '#/components/schemas/Address'
        items:
          type: array
          description: Items in the order
          items:
            type: object
            properties:
              product_id:
                type: string
                example: '12332'
              sku:
                type: string
                example: Dell Mouse G2
              description:
                type: string
                example: Gaming Mouse by Dell; 1200 dpi
              category_code:
                type: string
                example: ELE1201
              quantity:
                type: integer
                example: 45
                description: ''
              price:
                type: integer
                description: Price per Unit
                example: 900
              vendor_id:
                type: string
                example: '4235463'
            required:
              - product_id
              - quantity
              - price
              - vendor_id
        bill_amount:
          type: number
          format: float
          description: Total cost of the order
          readOnly: true
        payment_method:
          type: string
          description: Mode of payment
          readOnly: true
          enum:
            - Debit Card
            - Credit Card
            - Cash
            - Net Banking
            - UPI
          example: UPI
        payment_status:
          type: string
          enum:
            - partially paid
            - paid
            - unpaid
          example: paid
        payment_ref:
          type: string
          example: '24414324141'
          description: Payment receipt code in case of e-payment
      required:
        - order_id
        - customer_id
        - shipping_adress
        - billing_address
        - items
        - bill_amount
        - payment_method
    User:
      title: User
      type: object
      properties:
        user_id:
          type: string
          readOnly: true
          example: '235362'
        name:
          type: string
          example: Bruce Wayne
        email_ids:
          type: array
          example:
            - email@work.com
            - email@home.com
          items:
            type: string
        user_role:
          type: string
          enum:
            - consumer
            - admin
            - vendor
          example: admin
        photo:
          type: string
          format: uri
          example: 'https://images.com/userImage'
        created_time:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        password:
          type: string
          writeOnly: true
          format: password
          example: my_little_secret
      description: >-
        Users are various individuals/entities that are a part of an
        organisation. Each user will have a different role to play, like admin,
        vendor etc., 
    Response:
      title: Response
      type: object
      description: Sample response schema
      xml:
        name: Response
      properties:
        message:
          type: string
          description: Response message from the server
        status_code:
          type: integer
          description: Status Code of response
    Shipment:
      title: Shipment
      type: object
      description: >-
        A document used by an organization to specify what items or packages are
        to be transferred from a storage location or warehouse to what person
        and to what new location is called a shipment order.
      properties:
        shipment_id:
          type: string
          description: '325354612312'
          example: '898735957983'
        shipment_number:
          type: string
          description: SH-9826
          example: SH-2873
        date:
          type: string
          format: date-time
          description: Date of shipment creation
        status:
          type: string
          description: Current status of the shipment
          enum:
            - fullfilled
            - shipped
            - out for delivery
            - preparing
          example: shipped
        detailed_status:
          type: string
          description: Detailed status of the shipment
          example: shipped from warehouse in Thane
        carrier:
          type: string
          description: Carrier of the shipment
          example: Fed-Ex
        customer_id:
          type: string
          example: '12496214'
        customer_name:
          type: string
          example: Molly
        items:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: string
                example: '123779790'
              sku:
                type: string
                example: PlayStation 4
              quantity:
                type: number
                example: 1
              price:
                type: number
                format: float
                example: 400000
              order_id:
                type: string
                example: '234235'
        shipping_charges:
          type: number
          example: 59
        total:
          type: number
          example: 2559
        billing_adress:
          $ref: '#/components/schemas/Address'
        shipping_adress:
          $ref: '#/components/schemas/Address'
    Category:
      title: Category
      type: object
      description: >-
        These are the type of products. Each category will have one of the
        parent/super category. Each category has different attributes which can
        be modified.
      xml:
        name: Category
      properties:
        category_id:
          type: string
          description: ID of the category
          example: '23423432'
        category_name:
          type: string
          description: Name of the category
          example: Mobile
        parent_category:
          type: string
          description: 'Super category e.g Electronics, Clothing'
          example: Electronics
        attributes:
          type: object
          description: 'Attributes of the category e.g RAM, Material, Power rating'
          example:
            - RAM: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT